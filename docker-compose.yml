version: "3"

# volumes:
#     prometheus_data: {}
#     grafana_data: {}

services:
    prometheus:
        image: prom/prometheus
        container_name: prometheus
        hostname: prometheus
        restart: always
        volumes:
            - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
            # - ./config/node_down.yml:/etc/prometheus/node_down.yml
            - ./config/alert_rules.yml:/etc/prometheus/alert_rules.yml
        ports:
            - "9090:9090"
        networks:
            - mynetwork
        depends_on:
            - fastapi

    node-exporter:
        image: quay.io/prometheus/node-exporter
        container_name: node-exporter
        restart: always
        ports:
            - "9100:9100"

        networks:
            - mynetwork
    cadvisor:
        image: google/cadvisor:latest
        container_name: cadvisor
        restart: always
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:rw
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
        ports:
            - "8080:8080"
        networks:
            - mynetwork
    grafana:
        image: grafana/grafana
        container_name: grafana
        restart: always
        ports:
            - "3000:3000"
        volumes:
            - ./grafana:/var/lib/grafana
        environment:
            GF_SECURITY_ADMIN_USER: admin
            GF_SECURITY_ADMIN_PASSWORD: P@ssw0rd
        networks:
            - mynetwork
    alertmanager:
        image: prom/alertmanager
        volumes:
            - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
        ports:
            - "9093:9093"
        # command:
        #     - '--config.file=/etc/config.yml'
        #     - '--storage.path= .'
        networks:
            - mynetwork

    fastapi:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: fastapi
        ports:
            - '8000:8000'
        
        restart: always
        networks:
            - mynetwork
        # deploy:
        #     resources:
        #         limits:
        #             cpus: '0.30'
        #             memory: 400M

networks:
    mynetwork: